name: Deploy KopiBudget to EC2 with Subdomains

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Clear NuGet cache
        run: dotnet nuget locals all --clear

      - name: Restore Dependencies
        working-directory: ./KopiBudget.Api
        run: dotnet restore

      - name: Build
        working-directory: ./KopiBudget.Api
        run: dotnet build --configuration Release --no-restore --verbosity minimal

      - name: Build API Docker image
        run: |
          cd KopiBudget.Api/KopiBudget.Api
          docker build -t codecoffee2024/kopibudget-api:latest -f KopiBudget.Api/KopiBudget.Api/Dockerfile .

      - name: Push API Docker image
        run: |
          docker push codecoffee2024/kopibudget-api:latest

      - name: Install dependencies
        run: |
          cd KopiBudget.Ui
          npm install

      - name: Build Angular app
        run: |
          cd KopiBudget.Ui
          npm run build -- --configuration=production --base-href=/

      - name: Build UI Docker image
        run: |
          cd KopiBudget.Ui
          docker build -t codecoffee2024/kopibudget-ui:latest .

      - name: Push UI Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push codecoffee2024/kopibudget-ui:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Create necessary directory
            mkdir -p /home/ec2-user/kopibudget

            # ALWAYS overwrite the configuration files to ensure they're updated
            cat > /home/ec2-user/kopibudget/nginx.conf << 'EOF'
            events {
                worker_connections 1024;
            }

            http {
                include /etc/nginx/mime.types;
                default_type application/octet-stream;

                upstream ui_backend {
                    server kopibudget-ui:80;
                }

                upstream api_backend {
                    server kopibudget-api:8080;
                }

                server {
                    listen 8080;
                    server_name kopibudget.jhonmorales.com;

                    location / {
                        proxy_pass http://ui_backend;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                        proxy_set_header X-Forwarded-Port 8080;
                    }
                }

                server {
                    listen 8081;
                    server_name kopibudget-api.jhonmorales.com;

                    location / {
                        proxy_pass http://api_backend;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                        proxy_set_header X-Forwarded-Port 8081;

                        add_header 'Access-Control-Allow-Origin' '*' always;
                        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;

                        if ($request_method = 'OPTIONS') {
                            return 204;
                        }
                    }
                }
            }
            EOF

                        cat > /home/ec2-user/kopibudget/docker-compose.prod.yml << 'EOF'
            version: "3.8"

            services:
              db:
                image: postgres:16
                container_name: kopibudget-postgres
                restart: unless-stopped
                environment:
                  POSTGRES_USER: dev
                  POSTGRES_PASSWORD: dev
                  POSTGRES_DB: kopibudget
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                networks:
                  - kopibudget-network

              api:
                image: codecoffee2024/kopibudget-api:latest
                container_name: kopibudget-api
                restart: unless-stopped
                depends_on:
                  - db
                environment:
                  - ASPNETCORE_ENVIRONMENT=Production
                  - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=kopibudget;Username=dev;Password=dev
                networks:
                  - kopibudget-network

              ui:
                image: codecoffee2024/kopibudget-ui:latest
                container_name: kopibudget-ui
                restart: unless-stopped
                depends_on:
                  - api
                networks:
                  - kopibudget-network

              nginx-proxy:
                image: nginx:alpine
                container_name: kopibudget-nginx-proxy
                restart: unless-stopped
                ports:
                  - "8080:8080"
                  - "8081:8081"
                volumes:
                  - ./nginx.conf:/etc/nginx/nginx.conf
                depends_on:
                  - ui
                  - api
                networks:
                  - kopibudget-network

            networks:
              kopibudget-network:
                driver: bridge

            volumes:
              postgres_data:
            EOF

            # Pull latest images (force pull to ensure we get the newest)
            docker pull codecoffee2024/kopibudget-ui:latest
            docker pull codecoffee2024/kopibudget-api:latest

            # Stop and remove all containers (force removal)
            cd /home/ec2-user/kopibudget
            docker-compose -f docker-compose.prod.yml down --remove-orphans

            # Remove old images to force using new ones
            docker image prune -f

            # Deploy with compose (this will use the newly pulled images)
            docker-compose -f docker-compose.prod.yml up -d

            # Verify deployment
            echo "=== Current running containers ==="
            docker ps

            echo "=== Recent images ==="
            docker images | grep codecoffee2024

            echo "=== Container logs ==="
            docker logs kopibudget-ui --tail 20
            docker logs kopibudget-api --tail 20
